<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数学 on Lingerois</title>
    <link>https://lingerois.com/categories/%E6%95%B0%E5%AD%A6/</link>
    <description>Recent content in 数学 on Lingerois</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Jul 2021 14:03:36 +0000</lastBuildDate><atom:link href="https://lingerois.com/categories/%E6%95%B0%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于格的密码 基石篇(1) 基础</title>
      <link>https://lingerois.com/p/%E5%9F%BA%E4%BA%8E%E6%A0%BC%E7%9A%84%E5%AF%86%E7%A0%81-%E5%9F%BA%E7%9F%B3%E7%AF%871-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 08 Jul 2021 14:03:36 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E5%9F%BA%E4%BA%8E%E6%A0%BC%E7%9A%84%E5%AF%86%E7%A0%81-%E5%9F%BA%E7%9F%B3%E7%AF%871-%E5%9F%BA%E7%A1%80/</guid>
      <description>注意, 本系列是Foundation of Lattice-Based Cryptography, 而不是Basic Lattice-Based Cryptography, 这意味着我们更多是关注基本定义, 困难问题, 算法, 而不是关注具体的密码方案. 此外, 基石对应foundation, 基础对应basics.
在文章中, 我们可能会用到SageMath作为计算工具以展示例子, 这是一个语法类似于Python的功能强大的开源计算软件.
基本定义 格实际上就是$\mathbb R^n$空间中周期出现的点阵, 它是$\mathbb R^n$的一个子集, 这里, &amp;ldquo;周期&amp;quot;是一个非常不精确的说法, 因此精确来说格可以定义如下.
 定义
令$\Lambda\subset \mathbb R^n$, 如果存在$\mathbb R^n$中的线性无关向量组$\mathbf b_1,\cdots,\mathbf b_m$, 满足
$$ \mathbf v\in\Lambda\iff \exists z_1,\cdots,z_m\in\mathbb Z:\mathbf v=\sum_{i\in[m]}z_i\mathbf b_i $$
那么就称$\Lambda$为$\mathbb R^n$中的一个格. 当$m=n$时, 就说$\Lambda$是满秩的.
 定义中, 我们要求格点是基的系数为整数的线性组合. &amp;ldquo;秩&amp;quot;一词是从英文&amp;quot;rank&amp;quot;中翻译过来的. 如果读者具有较好的代数基础, 那么可以得出实际上格上一个$\mathbb Z$-模. 这里的格的秩实际上就是这个$\mathbb Z$-模的秩.
其他 用SVP$\gamma$的Oracle求解GapSVP$\gamma$
当给定GapSVP$\gamma$的输入$(\mathbf B,r)$的时候, 访问一次SVP$\gamma$的Oracle可以得到一个向量$v$长度为$r^\prime$使得$r^\prime\in[\lambda_1(\mathbf B),\gamma\lambda_1(\mathbf B)]$, 此时我们可以根据$r^\prime$来决定输入. 根据$r,\lambda_1(\mathbf B)$的大小不同, 有如下几种情况:
其中阴影部分是我们能够得到的$r&#39;$的大小.</description>
    </item>
    
    <item>
      <title>Field Theory (1) Field, Field Extension</title>
      <link>https://lingerois.com/p/field-theory-1-field-field-extension/</link>
      <pubDate>Sun, 21 Mar 2021 14:31:42 +0000</pubDate>
      
      <guid>https://lingerois.com/p/field-theory-1-field-field-extension/</guid>
      <description>Warning
This is not a overall introduction to the field theory. Please resort to a textbook if you are a beginner in field theory.
 Field are those commutative rings s.t. every element except $0$ has an invers element. We start with the simplest fields.
 Prime Field
For any field $k$, define its prime field to be the intersection of all subfields
 For any field, its prime field must be $\mathbb Q$ or $\mathbb F_p$ for some prime $p$.</description>
    </item>
    
    <item>
      <title>数论变换简介</title>
      <link>https://lingerois.com/p/%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 12 Apr 2020 21:19:24 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2%E7%AE%80%E4%BB%8B/</guid>
      <description>背景介绍 Ring-LWE和Modular-LWE问题已经在密码学理论和应用中非常广泛地使用了，而其中最为广泛使用的环，则是环$R_q=\mathbb Z_q[x]/\Phi_m(x)$，因此在这个环上快速进行乘法，成了基于Ring/Modular-LWE的密码算法实现中的效率方面关注的重要问题。
现假设我们有多项式$a,b\in R_q$并且要计算它们相乘后在，如果采用直接在$\mathbb Z[x]$中计算乘积再求模的方式，我们首先得计算出$a\cdot b\in\mathbb Z[x]$，然后再依次模上$\Phi_m(x)$和$q$——这将会造成非常大的开销。幸运的是，我们有一个非常聪明的办法可以避免这个问题，该问题可以避免求多项式模$\Phi_m(x)$这一经常使用的操作，使得整个计算过程极大地加速，再配合上模素数运算的相关算法，可以使得整个运算在很快地时间内完成，极大提高了Ring/Modular-LWE相关算法的效率和实际应用价值。
这个巧妙的办法就是运用称作数论变换$\mathsf{NTT}(\cdot)$的同构，将多项式变换$a,b$均为向量$\hat a,\hat b$，然后计算$\widehat{ab}=\hat a\odot \hat b$，计算完成后，再用逆数论变换$\mathsf{NTT}^{-1}$将$\widehat{ab}$恢复为$a\cdot b$。这里的$\mathsf{NTT}$和$\mathsf{NTT}^{-1}$均为非常简单的操作，而&amp;quot;$\odot$&amp;ldquo;就是简单地将两个相同长度的向量的对应位乘起来再模$q$以得到一个新的向量，是一个非常简单的操作！以上两个运算使得多项式的乘法可以高效的计算，更进一步如果我们将反复用到一个多项式用作乘数，我们甚至可以让它暂时始终保持数论变换下的形式，来取得更好的计算效率。
下文中，我们将对上述过程进行形式化的描述，并介绍具体的算法，以及算法背后的一些数学知识。
数论变换算法 数论变换算法的形式多种多样，我们采用文章[LN16]中的方式进行介绍，但对记号做一定的修改。选择这个文章中的方式的主要原因一来是因为该文对数论变换的描述非常接近离散傅里叶变换，因此熟悉离散傅里叶变换的读者可以快速明白整个算法的过程；二来该文中的描述足够简洁和清晰，这样想要阅读原文的读者也不会花费大量时间。改变原文的记号的是希望同Ring-LWE的开山之作[LPR12]及其其他相关文章相统一，以能更好地进行理论方面的解释。同时不熟悉傅里叶变化的读者也完全没有必要再去研究它的具体过程，以及它到底有什么用，我们在文章将其当成一个固定的模块来使用，它是数论变换的一个环节，而其逆变换也是数论逆变换的一个环节。
   符号的意义 [LN16]中的符号 本文中的符号     傅里叶变换 $\mathrm{NTT}$ $\mathsf{DFT}$   傅里叶逆变换 $\mathrm{INTT}$ $\mathsf{DFT}^{-1}$   数论变换形式的多项式 - $\hat a$    我们考虑最常见的情形，设$m=2^d$是一个2的幂次，并令$n=\phi (m)$, 其中$\phi(\cdot)$是高斯函数，则有$n=2^{d-1}$。在这样的参数下，分圆多项式具有非常简洁的形式$\Phi_m=x^n+1$，模这样的分圆多项式的多项式环也是Ring/Modular-LWE算法中最常选择的环。如果素数$q$的选择也恰好使得$\mathbb Z_q^\times$中有一个阶为$m$的元素$r$，此时数论变换也就派上用场了。现在假设上述参数全部满足，计算环元素$a,b\in\mathbb Z_q[x]/\Phi_m(x)$可以通过数论变换来进行，由于多项式也可以写成由系数组成的向量的形式，对于任意多项式$c=c_0+c_1x+c_2x^2+\cdots+c_{n-1}c^{n-1}\in\mathbb Z_q[x]/\Phi_m(x)$，$\mathbb Z_q^n$中的向量，即$c=(c_0,c_1,\cdots,c_{n-1})$，有了这种对应后，我们不再区分几种变换函数中的参数是多项式还是向量。首先我们假设$\omega=r^2$，并令矩阵
$$ \mathbf A=\left[ \begin{matrix} \omega^0 &amp;amp; \omega^0	&amp;amp; \omega^0 &amp;amp; \cdots &amp;amp; \omega^0 \newline \omega^0 &amp;amp; \omega^1	&amp;amp; \omega^2 &amp;amp; \cdots &amp;amp; \omega^{n-1} \newline \omega^0 &amp;amp; \omega^2 &amp;amp; \omega^4 &amp;amp; \cdots &amp;amp; \omega^{2(n-1)} \newline \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \newline \omega^0 &amp;amp; \omega^{n-1}	&amp;amp; \omega^{2(n-1)} &amp;amp; \cdots &amp;amp; \omega^{(n-1)^2} \end{matrix} \right] $$</description>
    </item>
    
  </channel>
</rss>
