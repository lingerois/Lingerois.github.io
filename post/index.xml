<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Lingerois</title>
    <link>https://lingerois.com/post/</link>
    <description>Recent content in Posts on Lingerois</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Jul 2021 14:03:36 +0000</lastBuildDate><atom:link href="https://lingerois.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于格的密码 基石篇(1) 基础</title>
      <link>https://lingerois.com/p/%E5%9F%BA%E4%BA%8E%E6%A0%BC%E7%9A%84%E5%AF%86%E7%A0%81-%E5%9F%BA%E7%9F%B3%E7%AF%871-%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 08 Jul 2021 14:03:36 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E5%9F%BA%E4%BA%8E%E6%A0%BC%E7%9A%84%E5%AF%86%E7%A0%81-%E5%9F%BA%E7%9F%B3%E7%AF%871-%E5%9F%BA%E7%A1%80/</guid>
      <description>注意, 本系列是Foundation of Lattice-Based Cryptography, 而不是Basic Lattice-Based Cryptography, 这意味着我们更多是关注基本定义, 困难问题, 算法, 而不是关注具体的密码方案. 此外, 基石对应foundation, 基础对应basics.
在文章中, 我们可能会用到SageMath作为计算工具以展示例子, 这是一个语法类似于Python的功能强大的开源计算软件.
基本定义 格实际上就是$\mathbb R^n$空间中周期出现的点阵, 它是$\mathbb R^n$的一个子集, 这里, &amp;ldquo;周期&amp;quot;是一个非常不精确的说法, 因此精确来说格可以定义如下.
 定义
令$\Lambda\subset \mathbb R^n$, 如果存在$\mathbb R^n$中的线性无关向量组$\mathbf b_1,\cdots,\mathbf b_m$, 满足
$$ \mathbf v\in\Lambda\iff \exists z_1,\cdots,z_m\in\mathbb Z:\mathbf v=\sum_{i\in[m]}z_i\mathbf b_i $$
那么就称$\Lambda$为$\mathbb R^n$中的一个格. 当$m=n$时, 就说$\Lambda$是满秩的.
 定义中, 我们要求格点是基的系数为整数的线性组合. &amp;ldquo;秩&amp;quot;一词是从英文&amp;quot;rank&amp;quot;中翻译过来的. 如果读者具有较好的代数基础, 那么可以得出实际上格上一个$\mathbb Z$-模. 这里的格的秩实际上就是这个$\mathbb Z$-模的秩.
其他 用SVP$\gamma$的Oracle求解GapSVP$\gamma$
当给定GapSVP$\gamma$的输入$(\mathbf B,r)$的时候, 访问一次SVP$\gamma$的Oracle可以得到一个向量$v$长度为$r^\prime$使得$r^\prime\in[\lambda_1(\mathbf B),\gamma\lambda_1(\mathbf B)]$, 此时我们可以根据$r^\prime$来决定输入. 根据$r,\lambda_1(\mathbf B)$的大小不同, 有如下几种情况:
其中阴影部分是我们能够得到的$r&#39;$的大小.</description>
    </item>
    
    <item>
      <title>伪随机性(1) 随机算法 谱图论</title>
      <link>https://lingerois.com/p/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A71-%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95-%E8%B0%B1%E5%9B%BE%E8%AE%BA/</link>
      <pubDate>Tue, 06 Jul 2021 17:01:01 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A71-%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95-%E8%B0%B1%E5%9B%BE%E8%AE%BA/</guid>
      <description>本章主要通过一些随机化的算法介绍了两个工具:
 马尔可夫不等式(Markov Inequality)和切尔诺夫界(Chernoff Bound) 用代数的方法研究图论, 即随机游走  笔记中, 我们不会关注本章中讲的具体算法, 而是主要关注有关谱图论(spetral graph theory)的部分.
约定
 在研究图$G$, 一般认为$G=(V,E)$, 其中$V,E$分别是点集和边集. 一般记为$|V|=n$, 图算法的复杂度也用有关$n$的函数来表示. 在本系列中, 如果向量(如$x$)出现在矩阵(如$M$)前面, 则$x$是行向量, 反之$x$为列向量. 记本文记号$xMx$相当于标准记号$\mathbf x^T\mathbf M\mathbf x$.  概率不等式  引理 Markov不等式
令$X$是一个飞负的随机变量, 则对于任意$\alpha&amp;gt;0$, 有 $$ \Pr[X\geq \alpha]\leq \frac{\operatorname E[X]}{\alpha} $$
 Markov不等式的证明非常简单, 也显得非常粗略, 但是它对于推出Chernoff界已经足够了.
书中介绍的是广义的Chernoff界, 证明同伯努利分布的证明略有不同.
 定理 Chernoff界
令$X_1,\cdots,X_t$是独立随机变量, 且都在$[0,1]$上取值, 令$X=(\sum_i X_i)/t$, 且$\mu=\operatorname{E}[X]$. 则有 $$ \Pr[|X-\mu|\geq \varepsilon]\leq 2\operatorname{exp}(-t\varepsilon^2/4) $$
 Chernoff界在随机算法中的非常重要, 它使得我们可以重复一个随机算法多次, 以大多数次数的输出结果为最终结果, 使得我们计算正确的概率显著提高.
随机游走 伪随机性研究的一个重要工具就是谱图论. 它允许我们用代数的手段来研究图论. 谱图论中, 我们经常用到digraph和无向图:</description>
    </item>
    
    <item>
      <title>Field Theory (1) Field, Field Extension</title>
      <link>https://lingerois.com/p/field-theory-1-field-field-extension/</link>
      <pubDate>Sun, 21 Mar 2021 14:31:42 +0000</pubDate>
      
      <guid>https://lingerois.com/p/field-theory-1-field-field-extension/</guid>
      <description>Warning
This is not a overall introduction to the field theory. Please resort to a textbook if you are a beginner in field theory.
 Field are those commutative rings s.t. every element except $0$ has an invers element. We start with the simplest fields.
 Prime Field
For any field $k$, define its prime field to be the intersection of all subfields
 For any field, its prime field must be $\mathbb Q$ or $\mathbb F_p$ for some prime $p$.</description>
    </item>
    
    <item>
      <title>数论变换简介</title>
      <link>https://lingerois.com/p/%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 12 Apr 2020 21:19:24 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2%E7%AE%80%E4%BB%8B/</guid>
      <description>背景介绍 Ring-LWE和Modular-LWE问题已经在密码学理论和应用中非常广泛地使用了，而其中最为广泛使用的环，则是环$R_q=\mathbb Z_q[x]/\Phi_m(x)$，因此在这个环上快速进行乘法，成了基于Ring/Modular-LWE的密码算法实现中的效率方面关注的重要问题。
现假设我们有多项式$a,b\in R_q$并且要计算它们相乘后在，如果采用直接在$\mathbb Z[x]$中计算乘积再求模的方式，我们首先得计算出$a\cdot b\in\mathbb Z[x]$，然后再依次模上$\Phi_m(x)$和$q$——这将会造成非常大的开销。幸运的是，我们有一个非常聪明的办法可以避免这个问题，该问题可以避免求多项式模$\Phi_m(x)$这一经常使用的操作，使得整个计算过程极大地加速，再配合上模素数运算的相关算法，可以使得整个运算在很快地时间内完成，极大提高了Ring/Modular-LWE相关算法的效率和实际应用价值。
这个巧妙的办法就是运用称作数论变换$\mathsf{NTT}(\cdot)$的同构，将多项式变换$a,b$均为向量$\hat a,\hat b$，然后计算$\widehat{ab}=\hat a\odot \hat b$，计算完成后，再用逆数论变换$\mathsf{NTT}^{-1}$将$\widehat{ab}$恢复为$a\cdot b$。这里的$\mathsf{NTT}$和$\mathsf{NTT}^{-1}$均为非常简单的操作，而&amp;quot;$\odot$&amp;ldquo;就是简单地将两个相同长度的向量的对应位乘起来再模$q$以得到一个新的向量，是一个非常简单的操作！以上两个运算使得多项式的乘法可以高效的计算，更进一步如果我们将反复用到一个多项式用作乘数，我们甚至可以让它暂时始终保持数论变换下的形式，来取得更好的计算效率。
下文中，我们将对上述过程进行形式化的描述，并介绍具体的算法，以及算法背后的一些数学知识。
数论变换算法 数论变换算法的形式多种多样，我们采用文章[LN16]中的方式进行介绍，但对记号做一定的修改。选择这个文章中的方式的主要原因一来是因为该文对数论变换的描述非常接近离散傅里叶变换，因此熟悉离散傅里叶变换的读者可以快速明白整个算法的过程；二来该文中的描述足够简洁和清晰，这样想要阅读原文的读者也不会花费大量时间。改变原文的记号的是希望同Ring-LWE的开山之作[LPR12]及其其他相关文章相统一，以能更好地进行理论方面的解释。同时不熟悉傅里叶变化的读者也完全没有必要再去研究它的具体过程，以及它到底有什么用，我们在文章将其当成一个固定的模块来使用，它是数论变换的一个环节，而其逆变换也是数论逆变换的一个环节。
   符号的意义 [LN16]中的符号 本文中的符号     傅里叶变换 $\mathrm{NTT}$ $\mathsf{DFT}$   傅里叶逆变换 $\mathrm{INTT}$ $\mathsf{DFT}^{-1}$   数论变换形式的多项式 - $\hat a$    我们考虑最常见的情形，设$m=2^d$是一个2的幂次，并令$n=\phi (m)$, 其中$\phi(\cdot)$是高斯函数，则有$n=2^{d-1}$。在这样的参数下，分圆多项式具有非常简洁的形式$\Phi_m=x^n+1$，模这样的分圆多项式的多项式环也是Ring/Modular-LWE算法中最常选择的环。如果素数$q$的选择也恰好使得$\mathbb Z_q^\times$中有一个阶为$m$的元素$r$，此时数论变换也就派上用场了。现在假设上述参数全部满足，计算环元素$a,b\in\mathbb Z_q[x]/\Phi_m(x)$可以通过数论变换来进行，由于多项式也可以写成由系数组成的向量的形式，对于任意多项式$c=c_0+c_1x+c_2x^2+\cdots+c_{n-1}c^{n-1}\in\mathbb Z_q[x]/\Phi_m(x)$，$\mathbb Z_q^n$中的向量，即$c=(c_0,c_1,\cdots,c_{n-1})$，有了这种对应后，我们不再区分几种变换函数中的参数是多项式还是向量。首先我们假设$\omega=r^2$，并令矩阵
$$ \mathbf A=\left[ \begin{matrix} \omega^0 &amp;amp; \omega^0	&amp;amp; \omega^0 &amp;amp; \cdots &amp;amp; \omega^0 \newline \omega^0 &amp;amp; \omega^1	&amp;amp; \omega^2 &amp;amp; \cdots &amp;amp; \omega^{n-1} \newline \omega^0 &amp;amp; \omega^2 &amp;amp; \omega^4 &amp;amp; \cdots &amp;amp; \omega^{2(n-1)} \newline \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \newline \omega^0 &amp;amp; \omega^{n-1}	&amp;amp; \omega^{2(n-1)} &amp;amp; \cdots &amp;amp; \omega^{(n-1)^2} \end{matrix} \right] $$</description>
    </item>
    
    <item>
      <title>计算复杂性(3) NP完备性</title>
      <link>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A73-np%E5%AE%8C%E5%A4%87%E6%80%A7/</link>
      <pubDate>Tue, 20 Aug 2019 23:16:19 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A73-np%E5%AE%8C%E5%A4%87%E6%80%A7/</guid>
      <description>If $\mathbf{P}=\mathbf{NP}$, then $\mathbf N=1$ or $\mathbf{P}=0$.
----Turing Machine
$\mathbf{NP}$完备性的是计算复杂性上一个至关重要的问题. 简而言之, $\mathbf{NP}$问题就是那些能够在确定多项式时间内被验证答案的判定问题, 即那些很容易就被检验的问题. $\mathbf{NP}$问题中, 有大量非常有现实意义但到现目前为止都没有好的解决办法的问题. 有关$\mathbf{NP}$完备性的讨论热度也从来没有衰减过. 2000年, 美国克雷数学研究所将$\mathbf{P}\overset{?}=\mathbf{NP}$列为七个千禧年大奖难题之一.
非确定计算模型 现在我们介绍一个计算模型. 该计算模型机的功能非常强大, 能够在多项式时间内求解很多我们尚未发现高效算法的问题.
非确定图灵机  非确定图灵机就像一台可以有无限个线程的计算机.
 非确定图灵机(nondeterministic Turing machine, NDTM)与图灵机的定义大致相同. 不同的是, 非确定图灵机有两个转移函数, 每一步计算可以选择两个转移函数中的任何一个. 非确定图灵机物理上是不能实现的.
 定义 非确定图灵机
一个非确定图灵机$N$是一个三元组$(\Gamma, Q, \delta=(\delta_1,\delta_2))$.
 有限集$\Gamma$是字母表, 表示纸带可以记录的符号集. 有限集$Q$是状态集, 表示状态机的状态, 其中一个特殊的状态$q_\text{start}$为起始状态, $q_\text{accept}$为表示接受的停机状态, $q_\text{reject}$为表示拒绝的停机状态. $\delta_1,\delta_2: Q\times \Gamma^k\to Q\times \Gamma^{k-1}\times \lbrace \text L,\text S,\text R\rbrace ^k$是两个转移函数   至于如何选择转移函数, 不是我们关心的问题, 因为我们非确定图灵机对问题的判定只关心计算路径.
非确定图灵机的中还有一点需要说的是, 非确定图灵机对一个语言的判定结果, 是从最终的停机状态进行输出的. 实际上我们也可以这样来定义图灵机, 但是 没有必要. 非确定图灵机之所以要这样定义, 是因为其判定一个语言的定义与图灵机有所不同.</description>
    </item>
    
    <item>
      <title>同态加密(3) BGV方案</title>
      <link>https://lingerois.com/p/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%863-bgv%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 18 Aug 2019 15:40:01 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%863-bgv%E6%96%B9%E6%A1%88/</guid>
      <description>BGV同态加密方案是由Zvika Brakerski, Graig Gentry, Vindo Vaikuntanathan提出于[BGV12] 1. 该方案是BV11b方案基础上一个较大的改进. 该方案挖掘出BV11b方案中模数切换可以降低密文的绝对噪声这一特点, 将其发扬广大, 使得在加密在无需Bootstrapping的情况下可以做到较多层数的同态乘法运算.
如果需要实现全同态加密, 该方案仍需要引入Circular Security假设和Boostrapping. 但是由于模数切换使得我们可以在不进行Bootstrapping的情况下做较多次数的同态运算, 并且使得Bootstrapping之前的密文模数变得非常小, 因此Bootstrapping是非常容易的. 因此该方法能够显著降低Bootstrapping的次数和难度.
简介 我们在介绍BV11b方案的时候, 介绍过密文的格式为$(\mathbf v,w)$, 此处我们忽略了密文的同态层数. 密钥的解密可以表示为
  $\mathsf{Dec}(sk=\mathbf s&#39;,(\mathbf v,w))$: 计算并输出
$$ (w-\langle\mathbf v,\mathbf s&#39;\rangle\mod q)\mod 2 $$
  我们将采用另一种形式的LWE加密来表示上述问题(在LWE介绍性文章(写成后地址将被更新到这里)以及本文之后的内容会有介绍), 用$\mathbf c$表示密文, 用$\mathbf s$表述明文, 上述解密过程可以被简化为$[[\langle\mathbf c,\mathbf s\rangle]_q]_2$, 其中$[\cdot]_k$表示模$k$运算. 这种形式的密文噪声体现在哪里呢? 其实本身就是大$[\langle\mathbf c,\mathbf s\rangle]_q$概的噪声.
BV11b的核心思想之一是在最后同态计算结束后, 需要将大密文(即维数和模数较大的密文)转换为小密文(即模数和维数较小的密文). 其中, 维数切换的操作是平凡, 而模数切换的操作需要一定的技巧性, 且其安全性依赖于稀疏子集和假设. 一个不太让人感觉到的惊奇的现象是, 在进行模数切换的时, 噪声也成比例减小了. 即我们有如下引理:
 引理1 设$p$和$q$是两个奇数模数, $\mathbf c$是一个整数向量. 令$\mathbf c&#39;$为一个距离$(p/q)\cdot\mathbf c$最近的一个整数向量满足$\mathbf c&#39;=\mathbf c\mod 2$.</description>
    </item>
    
    <item>
      <title>同态加密(2) BV11b方案</title>
      <link>https://lingerois.com/p/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%862-bv11b%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 14 Aug 2019 13:06:22 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%862-bv11b%E6%96%B9%E6%A1%88/</guid>
      <description>原文作者之一Zvika Brakerski在2018 CIS冬令营上为学员讲解全同态加密原文作者之一Vinod Vaikuntanathan在2018 CIS冬令营上为学员讲解全同态加密
CIS 2018回顾
符号说明 本文中, 我们采用方括号+下标的方式来表示向量中的具体某一位. 例如向量$\mathbf s$的第$i$位用$\mathbf s[i]$来表示. 我们有时候会用下标0来表示不存在的下标, 例如$h_i$可以用$h_{i,0}$来表示, 这样做的好处是, 我们不用显式地提及$h_i$, 而是用$h_{i,j}$就可以表示所有的$h_{i,j\neq 0}$和$h_i$来避免描述地冗长.
原文中的安全参数采用的是$\kappa$, 由于这个字母容易和$k$混淆, 且为了与我其他博文统一, 我修改为了$\lambda$.
简介 假设我们采用的LWE的噪声为偶数, 即具有$2\mathbf e$的形式, 则最终我们得到的加密密文具有$(\mathbf a,b=\langle\mathbf a,\mathbf s\rangle+2e+m)\in\mathbb Z_q^n\times \mathbb Z_q$的形式, 其中$m\in\lbrace0,1\rbrace$是我们加密的密文. 在有了这种形式的密文后, 通过$b-\langle\mathbf a,\mathbf s\rangle=2e+m$, 再模上2方可解除$m$.
如果我们将解密的过程看作是一个函数, 即对于$\bf a$来说, $f_{\mathbf a,b}(\mathbf x)=b-\langle\mathbf a,\mathbf x\rangle \mod q$, 那么当我们输入正确的密钥$\mathbf s$时, 最终计算出的结果再模上2就是解密的结果. 如果$\mathbf a$具有$n$维, 我们有 $$ f_{\mathbf a,b}(\mathbf x)=b-\sum_{i=1}^n \mathbf a[i]\cdot \mathbf s[i] $$ 先假设另一个明文$m&#39;\in\lbrace 0,1\rbrace$采用$(\mathbf a&#39;,b&#39;=\langle\mathbf a&#39;,s\rangle+2e&#39;+m&#39;)$进行加密, 那么很显然的, $f_{\mathbf a&#39;,b&#39;}(\mathbf x)$可以用来描述其解密过程.</description>
    </item>
    
    <item>
      <title>Cryptography (1) One-Way Function</title>
      <link>https://lingerois.com/p/cryptography-1-one-way-function/</link>
      <pubDate>Sun, 11 Aug 2019 21:29:13 +0000</pubDate>
      
      <guid>https://lingerois.com/p/cryptography-1-one-way-function/</guid>
      <description>Some Information about the Course
In this course, we mainly talk about the foundation of Cryptography. We talk about the big picture of cryptography, not the cryptosystem based on a specific assumption. Basic knowledge of probability theory, computational complexity is necessary for this course.
This serie of notes mainly follows Goldreich&amp;rsquo;s legendary book Foundations of Cryptograph. With some basic knowledge of computational complexity, one would enjoy the book a lot. (Though still difficult to learn.</description>
    </item>
    
    <item>
      <title>同态加密(1) GSW方案</title>
      <link>https://lingerois.com/p/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%861-gsw%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sun, 11 Aug 2019 21:29:13 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%861-gsw%E6%96%B9%E6%A1%88/</guid>
      <description>GSW方案是由Craig Gentry1, Amit Sahai与Brent Waters于2013年提出的方案, 发表于论文[GSW13]中.
GSW方案确实如论文标题一样, 概念清晰明了, 其Intuition简单到一个刚学完线性代数的大一新生也能理解. GSW还支持基于属性的加密, 但本文中我们将不介绍这一部分内容.
当然, 完全理解GSW方案仍然需要用到一些比较进阶的知识, 如LWE问题的困难性等. 我们在本文中不会对这些知识做过多的介绍, 这些知识将在今后其他的博文中介绍.
Basic Intuition 密文的基本格式 最基本的GSW同态加密方案的私钥($sk$)是一个向量$\mathbf v\in\mathbb Z_q^N$, 而所有的明文$\mu_i\in{0,1}$都被加密一个矩阵$C_i\in\mathbb Z_q^{N\times N}$中, 其中$C_i$是以$v$为近似特征向量并以$\mu_i$为近似特征值的矩阵, 即我们要求 $$ C_i\mathbf v\approx \mu_i \mathbf v $$ 这里可以看出， 我们只需要挑选$\mathbf v$中非$0$的位(最好是选较大的位), 如第$j$位$v_j$, 并比较$v_j$与$\mu_iv_j$的值就可以解出$\mu_i$的值.
一个需要注意的地方就是, 虽然$\mu_i$取自${0,1}$, 但被视作是$\mathbb Z_q$中的元素, 因此具体的运算也是按照$\mathbb Z_q$的运算方式来进行.
我们也可以将噪声(error)显式地写出来, 记作 $$ C_i\mathbf v=\mu_i\mathbf v+\mathbf e $$ 其中$\mathbf e$是非常小的向量. 因此可以看出, 如果$\mathbf e$确实是一个较小的噪声, 那么我们就可以正确地解出$\mu_i$.
乘法同态性质 现在我们来验证该加密方案具有同态性质. 现在假设有两个密文$C_1, C_2$, 对对应的明文分别是$\mu_1,\mu_2$, 即 $$ \begin{aligned} C_1\mathbf v=\mu_1\mathbf v+\mathbf e_1 \newline C_2\mathbf v=\mu_2\mathbf v+\mathbf e_2 \end{aligned} $$ 其中$\mathbf e_1,\mathbf e_2$均为较小的噪声, 那么令$C^\times=C_1\cdot C_2$, 我们检验$C^\times$的解密结果 $$ \begin{aligned} C^\times\mathbf v &amp;amp;=(C_1\cdot C_2)\mathbf v \newline &amp;amp;=C_1(\mu_2\mathbf v+\mathbf e_2) \newline &amp;amp;=\mu_2(\mu_1\mathbf v+\mathbf e_1)+C_1\mathbf e_2\newline &amp;amp;= \mu_1\mu_2\mathbf v+\mu_2\mathbf e_1+C_1\mathbf e_2 \end{aligned} $$ 这里可以看出, $\mu_2\mathbf e_1$确实是一个比较小的噪声项, 但是要让$C^\times$的噪声比较小, 那么就需要让$C_1$是一个较小的矩阵(即其最大的元素较小), 我们稍后会解释如何做到这一点.</description>
    </item>
    
    <item>
      <title>计算复杂性(2) 图灵机与可计算性</title>
      <link>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A72-%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8E%E5%8F%AF%E8%AE%A1%E7%AE%97%E6%80%A7/</link>
      <pubDate>Fri, 29 Mar 2019 12:06:45 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A72-%E5%9B%BE%E7%81%B5%E6%9C%BA%E4%B8%8E%E5%8F%AF%E8%AE%A1%E7%AE%97%E6%80%A7/</guid>
      <description>图灵机是一种计算复杂性常用的一种计算模型, 图灵机由于结构简单并且功能完善而被广泛采用, 贯穿整个计算复杂性研究的始终.
 这将是非常长的一个章节. 本节开始, 我们正式开始讲解现代复杂性理论. 当你看到一套科学理论中有&amp;quot;现代&amp;quot;这两个字的时候, 你应该做好心里准备, 因为这意味着它并不是那么容易懂. 这些理论是现当代著名科学家的重要研究成果, 需要花上一些时间去理解.
 符号约定    符号 意义     $\mid x\mid$ 串$x$的长度   $ \llcorner M\lrcorner$ 图灵机$M$的编码   $\mathbb M$ 所有图灵机的集合    图灵机计算模型 图灵机是一种计算复杂性常用的一种计算模型, 图灵机由于结构简单并且功能完善[^1]而被广泛采用, 贯穿整个计算复杂性研究的始终.
图灵机 我们前面已经看到, 自动机确实能解决一些判定问题, 即正则语言的判定问题. 那么, 正则语言到底有多少? 实际上我们会发现, 正则语言真的非常少. 判定一个语言是不是正则语言, 可以根据著名的泵引理(pumping lemma)来完成, 我们这里不对其进行正式介绍, 但是我们直接说明, 通过泵引理, 下面这一的简单的语言都不是正则语言: $$ L=\lbrace x:x中的0和1个数相同 \rbrace $$ 如果要直观地理解, 我们的自动机中并没有结构来记录串中的$0$和$1$到底有多少个, 也就无法完成判定工作, 因为我们可以猜测这个语言不是正则语言. 为了加强自动机的计算能力, 我们引入一种新的强大的计算模型, 并且出人意料的是, 它的结果相当简单.</description>
    </item>
    
    <item>
      <title>Averaging Argument</title>
      <link>https://lingerois.com/p/averaging-argument/</link>
      <pubDate>Thu, 21 Mar 2019 23:45:57 +0000</pubDate>
      
      <guid>https://lingerois.com/p/averaging-argument/</guid>
      <description>The following example can be regarded as a generalization of Pigeonhole Principle.
 Example 1
If every person likes at least $1/3$ of the books in a library, then the library has a book, which at least $1/3$ of people like.
 Proof: Suppose there are $N$ people in total and $B$ books in the library. Let all the people leave a mark on the books they like, then there are at least $NB/3$ marks.</description>
    </item>
    
    <item>
      <title>计算复杂性(1) 自动机与正则语言</title>
      <link>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A71-%E8%87%AA%E5%8A%A8%E6%9C%BA%E4%B8%8E%E6%AD%A3%E5%88%99%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Tue, 05 Mar 2019 12:06:45 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A71-%E8%87%AA%E5%8A%A8%E6%9C%BA%E4%B8%8E%E6%AD%A3%E5%88%99%E8%AF%AD%E8%A8%80/</guid>
      <description>计算问题 什么是计算机? 计算, 就是解决某个具体问题的算法, 得出相应的答案. 计算机就是能执行某个具体算法的机器. 即Computer就用来是Compute的机器. 此外, 讨论什么是机器, 对我们研究计算机科学毫无帮助, 你只需要知道, 计算机就是用来执行算法的机器. 我们要做的就是, 用最简单的理论模型, 最大程度的抽象化我们现有的计算机.
语言  定义 语言
一个字母表(alphabet)是一个非空有限集合, 该集合中的元素称为符号(symbol).
一个字母表$\Sigma$上的语言(language)是$\Sigma$中的元素构成的有限序列(称为串, 即string)的集合.
 例如字母表$\Sigma=\lbrace 0,1\rbrace$, 则我们可以定义一个$\Sigma$上的语言$L=\lbrace x_1x_2\cdots x_n:\text{如果}x_i= 0,则x_{i+1}= 0\rbrace$, 则该语言为 $$ L=\lbrace\varepsilon, 0,1,10,11,100,110,111,\cdots\rbrace $$ 即所有的$1$都出现在任何$0$之前的串. 其中, $\varepsilon$表示空串, 即长度为$0$的串.
这里要注意的是
 我们说&amp;quot;序列&amp;quot;就要考虑顺序, 即$001$和$100$是不同的串. 串可以是空串, 即长度为$0$的串, 空串通常记作$\varepsilon$.  我们也可用更加形式化的描述来定义语言.
 定义 语言
设$\Sigma$是一个字母表, $\Sigma^0=\lbrace\varepsilon\rbrace$表示空串的集合, $\Sigma^n=\Sigma\times \Sigma\times\cdots\times \Sigma$为$n$个$\Sigma$的直积. 则$\Sigma$上的一个语言定义为$\Sigma^\ast=\bigcup\limits_{i\in\mathbb{N}}\Sigma^i$的子集.
 这里要注意的是$\Sigma^0$不是空集, 而是含有一个特殊的元素$\varepsilon$.
语言这个词可以说是一个相当糟糕的术语, 我们在这里不对这个术语本身进行过多的讨论, 但我们举例说明语言有多强大. 我们举一个有意义的例子.
例如, 一个语言可以用来表示所有的有向无环图, 我们试图用字母表$\Sigma=\lbrace 0,1\rbrace$上的语言来对图进行编码. 首先我们需要表示图$G=(V,E)$中的$V$, 我们约定$\dagger$之前的部分表示图中每个点的名称的长度$v$, 而$\dagger$之后依次的每个长度为$v$的连续子串表示图所有点的名称.</description>
    </item>
    
    <item>
      <title>计算复杂性(0) 目录</title>
      <link>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A70-%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Mon, 04 Mar 2019 21:29:13 +0000</pubDate>
      
      <guid>https://lingerois.com/p/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E6%80%A70-%E7%9B%AE%E5%BD%95/</guid>
      <description>写在前面 该笔记是我学习计算复杂性课程以及阅读相关书籍的过程中整理的笔记及个人理解. 整理成笔记除了加深我的个人理解外, 在这里分享给大家, 一方面也是是希望更多人能够理解这些内容, 感受这个世界为我们准备的惊喜. 另一方面也是为现在或是将来准备学习计算机的同学展示他们或许没有接触到的计算机科学的一角, 让大家知道计算机科学内涵的深度和广度, 能够看到Coding以外其他的东西, 也许能改变他们以后的人生路径. 注意, 本文不能替代任何课程, 教材或论文, 想要真正学习计算复杂性知识, 还是需要通过正规途径学习. 除此之外, 计算复杂性是密码学等一系列计算机理论课程的基础, 想要从事计算机理论方面的研究, 该课程是技能树上必点的技能.
Thanks to Prof. Fu (Yuxi Fu) at SJTU for giving us wonderful lectures.
如何学习? 不要沉溺于哲学问题(虽然可以作为兴趣偶尔讨论), 形式科学就要有形式科学该有的样子, 能从公理中得出的问题才是你该思考的问题.
目录 目前目录中列出的是我个人至少知道要研究些什么的内容, 实际上这里远不止这么一点, 后续的内容我会在学习完毕相应内容后再补充.
 自动机与正则语言 图灵机模型与可计算性 NP完备性 空间复杂性 多项式谱系 电路复杂性 随机化计算 扩展图和去随机化 计数复杂性 量子计算 交互证明 密码学 PCP定理  主要参考书目  Introduction to the Theory of Computation, Michael Sipser Computational Complexity: A Modern Approach, Sanjeev Arora and Boaz Barak  </description>
    </item>
    
  </channel>
</rss>
